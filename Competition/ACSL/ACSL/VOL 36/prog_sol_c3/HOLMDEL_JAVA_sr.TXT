// Jeffrey Lu
// ACSL Contest #3 2013-2014
// Senior 3 Division
// Holmdel High School

import java.io.*;
import java.util.*;

class Fanorona
{
	public static void main(String[] args) throws IOException
	{
		BufferedReader kb = new BufferedReader(new InputStreamReader(System.in));
		for (int n = 0; n < 5; n++)
		{
			//input
			ArrayList<Integer> white = new ArrayList<Integer>();
			ArrayList<Integer> black = new ArrayList<Integer>();
			int[] empty = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25};

			System.out.println("Please enter an input: ");
			StringTokenizer st = new StringTokenizer(kb.readLine(), " ,");
			int wPieces = Integer.parseInt(st.nextToken());
			for (int i = 0; i < wPieces; i++)
			{
				int temp = Integer.parseInt(st.nextToken());
				white.add(temp);
				empty[temp - 1] = 0;
			}
			int bPieces = Integer.parseInt(st.nextToken());
			for (int i = 0; i < bPieces; i++)
			{
				int temp = Integer.parseInt(st.nextToken());
				black.add(temp);
				empty[temp - 1] = 0;
			}

			//test all combinations of white pieces and black pieces
			ArrayList<Integer> captured = new ArrayList<Integer>();
			for (int i = 0; i < wPieces; i++)
			{
				for (int j = 0; j < bPieces; j++)
				{
					int w = white.get(i);
					int b = black.get(j);
					if (canCapture(w, b, empty))
					{
						int diff = b - w;
						int x = b;
						//away
						if (Math.abs(diff) <= 6 && Math.abs(diff) != 2)
						{
							while (1 <= x && x <= 25 && black.contains(x))
							{
								captured.add(x);
								x += diff;
							}
						}
						//toward
						else
						{
							diff /= 2;
							while (1 <= x && x <= 25 && black.contains(x))
							{
								captured.add(x);
								x += diff;
							}
						}
					}
				}
			}

			//output
			Collections.sort(captured);
			String output = "";
			if (captured.size() == 0)
			{
				output = "NONE";
			}
			else
			{
				for (int i = 0; i < captured.size(); i++)
				{
					output += captured.get(i) + ", ";
				}
				output = output.substring(0, output.length() - 2);
			}
			System.out.println(output);
		}
	}

	public static boolean canCapture(int w, int b, int[] empty)
	{
		int rDiff = getR(b) - getR(w);
		int cDiff = getC(b) - getC(w);

		//move away?
		if (Math.abs(rDiff) <= 1 && Math.abs(cDiff) <= 1)
		{
			if (contains(empty, convert(getR(w) - rDiff, getC(w) - cDiff)))
			{
				//make sure pieces aren't on an invalid diagonal
				if (w % 2 != 0 || b % 2 != 0)
				{
					return true;
				}
			}
		}
		//move toward?
		else if ((rDiff == 0 || Math.abs(rDiff) == 2) && (cDiff == 0 || Math.abs(cDiff) == 2))
		{
			if (contains(empty, convert(getR(w) + rDiff / 2, getC(w) + cDiff / 2)))
			{
				//make sure pieces aren't on an invalid diagonal
				if (w % 2 != 0 || b % 2 != 0 || Math.abs(b - w) % 4 != 0)
				{
					return true;
				}
			}
		}
		//none captured
		return false;
	}

	public static int getR(int x)
	{
		return (x - 1) / 5;
	}

	public static int getC(int x)
	{
		return (x - 1) % 5;
	}

	public static int convert(int r, int c)
	{
		if (0 <= r && r <= 4 && 0 <= c && c <= 4)
		{
			return 5 * r + c + 1;
		}
		else
		{
			return -1;
		}
	}

	public static boolean contains(int[] a, int x)
	{
		for (int i = 0; i < a.length; i++)
		{
			if (a[i] == x)
			{
				return true;
			}
		}
		return false;
	}
}