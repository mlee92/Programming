import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;


public class ACSLSLOTS
{
	public static int[][]board = new int[5][5];
	public static String[] start ;


	public static void main(String[] args) throws FileNotFoundException
	{
		Scanner scan = new Scanner(new File("input"));
		for (int q=0; q<2;q++)
		{
		 start = scan.nextLine().split(", ");
		
		convert(start[2]);
		System.out.println();
		
		for(int x = 0; x<5;x++)
		{
			int pat = Integer.parseInt(scan.nextLine());
			System.out.print(x+1+q*5 + ". ");
			solve(Integer.parseInt(start[0].substring(pat-1,pat)), pat);
		}
		
		}

	}
	
	public static void convert(String hex)
	{
		String bin = "";
		for(int x = 0; x<7; x++)
		{
			if(hex.substring(x,x+1).equalsIgnoreCase("f"))
				bin=bin+"1111";
			if(hex.substring(x,x+1).equalsIgnoreCase("e"))
				bin=bin+"1110";
			if(hex.substring(x,x+1).equalsIgnoreCase("d"))
				bin=bin+"1101";
			if(hex.substring(x,x+1).equalsIgnoreCase("c"))
				bin=bin+"1100";
			if(hex.substring(x,x+1).equalsIgnoreCase("b"))
				bin=bin+"1011";
			if(hex.substring(x,x+1).equalsIgnoreCase("a"))
				bin=bin+"1010";
			if(hex.substring(x,x+1).equalsIgnoreCase("9"))
				bin=bin+"1001";
			if(hex.substring(x,x+1).equalsIgnoreCase("8"))
				bin=bin+"1000";
			if(hex.substring(x,x+1).equalsIgnoreCase("7"))
				bin=bin+"0111";
			if(hex.substring(x,x+1).equalsIgnoreCase("6"))
				bin=bin+"0110";
			if(hex.substring(x,x+1).equalsIgnoreCase("5"))
				bin=bin+"0101";
			if(hex.substring(x,x+1).equalsIgnoreCase("4"))
				bin=bin+"0100";
			if(hex.substring(x,x+1).equalsIgnoreCase("3"))
				bin=bin+"1011";
			if(hex.substring(x,x+1).equalsIgnoreCase("2"))
				bin=bin+"0010";
			if(hex.substring(x,x+1).equalsIgnoreCase("1"))
				bin=bin+"0001";
			if(hex.substring(x,x+1).equalsIgnoreCase("0"))
				bin=bin+"0000";
		}
		int count = 0;
		bin=bin.substring(0,25);
	
		for(int x = 0; x<5;x++)
			for(int y = 0; y<5;y++)
			{
				board[x][y]=Integer.parseInt(bin.substring(count,count+1));
				count++;
			}
	}

	
	public static void  solve(int row, int pat)
	{
		int multi = 0;
		int consecutive = 0;
		row=row-1;
		if(pat==1)
		{
			if(board[row][0] == 1)
				consecutive+=1;
			else
				consecutive=0;
	
			
			
			if(board[row][1] == 1)
				consecutive+=1;
			else
				consecutive=0;
			
			
			
			if(board[row+1][2] == 1)
				consecutive+=1;
			else
				consecutive=0;
			
			if(consecutive >= 3)
				multi=consecutive-1;

			
			if(board[row+2][3] == 1)
				consecutive+=1;
			else
				consecutive=0;
			
			if(consecutive >= 3)
				multi=consecutive-1;
		
			
			
			if(board[row+2][4] == 1)
				consecutive+=1;
			else
				consecutive=0;
			
			if(consecutive >= 3)
				multi=consecutive-1;
			
			System.out.println(Integer.parseInt(start[1]) * multi);
				
		}
		
		if(pat==2)
		{
			if(board[row][0] == 1)
				consecutive+=1;
			else
				consecutive=0;
	
			
			
			if(board[row-1][1] == 1)
				consecutive+=1;
			else
				consecutive=0;
			
			
			
			if(board[row-1][2] == 1)
				consecutive+=1;
			else
				consecutive=0;
			
			if(consecutive >= 3)
				multi=consecutive-1;

			
			if(board[row-1][3] == 1)
				consecutive+=1;
			else
				consecutive=0;
			
			if(consecutive >= 3)
				multi=consecutive-1;
		
			
			
			if(board[row][4] == 1)
				consecutive+=1;
			else
				consecutive=0;
			
			if(consecutive >= 3)
				multi=consecutive-1;
			
			System.out.println(Integer.parseInt(start[1]) * multi);
				
		}
		if(pat==3)
		{
			if(board[row][0] == 1)
				consecutive+=1;
			else
				consecutive=0;
	
			
			
			if(board[row+1][1] == 1)
				consecutive+=1;
			else
				consecutive=0;
			
			
			
			if(board[row+2][2] == 1)
				consecutive+=1;
			else
				consecutive=0;
			
			
			if(consecutive >= 3)
				multi=consecutive-1;

			
			if(board[row+1][3] == 1)
				consecutive+=1;
			else
				consecutive=0;
			
			if(consecutive >= 3)
				multi=consecutive-1;
			
			
			
			if(board[row][4] == 1)
				consecutive+=1;
			else
				consecutive=0;
			
			if(consecutive >= 3)
				multi=consecutive-1;
			
			System.out.println(Integer.parseInt(start[1]) * multi);
				
		}
		if(pat==4)
		{
			if(board[row][0] == 1)
				consecutive+=1;
			else
				consecutive=0;
	
			
			
			if(board[row-1][1] == 1)
				consecutive+=1;
			else
				consecutive=0;
			
			
			
			if(board[row-2][2] == 1)
				consecutive+=1;
			else
				consecutive=0;
			
			if(consecutive >= 3)
				multi=consecutive-1;

			
			if(board[row-1][3] == 1)
				consecutive+=1;
			else
				consecutive=0;
			
			if(consecutive >= 3)
				multi=consecutive-1;
		
			
			
			if(board[row][4] == 1)
				consecutive+=1;
			else
				consecutive=0;
			
			if(consecutive >= 3)
				multi=consecutive-1;
			
			System.out.println(Integer.parseInt(start[1]) * multi);
				
		}
		if(pat==5)
		{
			if(board[row][0] == 1)
				consecutive+=1;
			else
				consecutive=0;
	
			
			
			if(board[row+1][1] == 1)
				consecutive+=1;
			else
				consecutive=0;
			
			
			
			if(board[row+1][2] == 1)
				consecutive+=1;
			else
				consecutive=0;
			
			if(consecutive >= 3)
				multi=consecutive-1;

			
			if(board[row+1][3] == 1)
				consecutive+=1;
			else
				consecutive=0;
			
			if(consecutive >= 3)
				multi=consecutive-1;
		
			
			
			if(board[row][4] == 1)
				consecutive+=1;
			else
				consecutive=0;
			
			if(consecutive >= 3)
				multi=consecutive-1;
			
			System.out.println(Integer.parseInt(start[1]) * multi);
				
		}
		if(pat==6)
		{
			if(board[row][0] == 1)
				consecutive+=1;
			else
				consecutive=0;
	
			
			
			if(board[row][1] == 1)
				consecutive+=1;
			else
				consecutive=0;
			
			
			
			if(board[row-1][2] == 1)
				consecutive+=1;
			else
				consecutive=0;
			
			if(consecutive >= 3)
				multi=consecutive-1;

			
			if(board[row-2][3] == 1)
				consecutive+=1;
			else
				consecutive=0;
			
			if(consecutive >= 3)
				multi=consecutive-1;
		
			
			
			if(board[row-2][4] == 1)
				consecutive+=1;
			else
				consecutive=0;
			
			if(consecutive >= 3)
				multi=consecutive-1;
			
			System.out.println(Integer.parseInt(start[1]) * multi);
				
		}
			
		
		
	}
}

